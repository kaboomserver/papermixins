package pw.kaboom.papermixins.mixin.fix.exploit.unloaded_block_packets;

import com.llamalad7.mixinextras.injector.wrapoperation.Operation;
import com.llamalad7.mixinextras.injector.wrapoperation.WrapOperation;
import net.minecraft.core.BlockPos;
import net.minecraft.server.level.ServerLevel;
import net.minecraft.server.level.ServerPlayer;
import net.minecraft.server.network.ServerGamePacketListenerImpl;
import net.minecraft.world.level.block.entity.BlockEntity;
import net.minecraft.world.level.block.state.BlockState;
import org.spongepowered.asm.mixin.Mixin;
import org.spongepowered.asm.mixin.Shadow;
import org.spongepowered.asm.mixin.Unique;
import org.spongepowered.asm.mixin.injection.At;

@Mixin(ServerGamePacketListenerImpl.class)
public abstract class ServerGamePacketListenerImplMixin {
    @Shadow
    public ServerPlayer player;

    @SuppressWarnings("AddedMixinMembersNamePattern")
    @Unique
    private boolean isReasonableQuery(final BlockPos pos) {
        //noinspection resource - we're not supposed to close this
        return player.level().hasChunkAt(pos);
    }

    @WrapOperation(method = {
        "handleBlockEntityTagQuery",
        "handleSetCommandBlock",
        "handleSetJigsawBlock",
        "handleJigsawGenerate",
        "handleSetStructureBlock",
        "handleSetTestBlock",
        "handleTestInstanceBlockAction"},
        at = @At(value = "INVOKE", target = "Lnet/minecraft/server/level/ServerLevel;getBlockEntity" +
            "(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/entity/BlockEntity;"))
    private BlockEntity getBlockEntity(final ServerLevel level, final BlockPos blockPos,
                                       final Operation<BlockEntity> original) {
        return isReasonableQuery(blockPos) ? original.call(level, blockPos) : null;
    }

    @WrapOperation(method = {
        "handleSetJigsawBlock",
        "handleSetStructureBlock",
        "handleSetTestBlock",
        "handleTestInstanceBlockAction"},
        at = @At(value = "INVOKE", target = "Lnet/minecraft/server/level/ServerLevel;getBlockState" +
            "(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;")
    )
    private BlockState getBlockState(final ServerLevel level, final BlockPos blockPos,
                                     final Operation<BlockState> original) {
        return isReasonableQuery(blockPos) ? original.call(level, blockPos) : null;
    }
}
