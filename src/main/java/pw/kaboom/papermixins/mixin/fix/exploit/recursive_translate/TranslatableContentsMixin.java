package pw.kaboom.papermixins.mixin.fix.exploit.recursive_translate;

import com.llamalad7.mixinextras.injector.ModifyExpressionValue;
import com.llamalad7.mixinextras.sugar.Local;
import com.mojang.serialization.Codec;
import it.unimi.dsi.fastutil.ints.Int2IntOpenHashMap;
import net.minecraft.locale.Language;
import net.minecraft.network.chat.Component;
import net.minecraft.network.chat.FormattedText;
import net.minecraft.network.chat.contents.TranslatableContents;
import net.minecraft.network.chat.contents.TranslatableFormatException;
import org.jetbrains.annotations.Nullable;
import org.spongepowered.asm.mixin.Mixin;
import org.spongepowered.asm.mixin.Shadow;
import org.spongepowered.asm.mixin.Unique;
import org.spongepowered.asm.mixin.injection.At;
import org.spongepowered.asm.mixin.injection.Inject;
import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;
import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;
import pw.kaboom.papermixins.util.DepthAwareCodec;

@Mixin(TranslatableContents.class)
public abstract class TranslatableContentsMixin {
    @Shadow
    private @Nullable Language decomposedWith;

    @Unique
    private static final int MAX_TRANSLATE_DEPTH = 4;
    @Unique
    private static final int MAX_COMPONENT_REFERENCES = 2;

    @Unique
    private final ThreadLocal<Int2IntOpenHashMap> papermixins$references =
            ThreadLocal.withInitial(() -> new Int2IntOpenHashMap(4));

    @ModifyExpressionValue(method = "<clinit>",
            at = @At(value = "FIELD", target = "Lnet/minecraft/network/chat/ComponentSerialization;CODEC" +
                    ":Lcom/mojang/serialization/Codec;"))
    private static Codec<Component> clinit$CODEC(final Codec<Component> original) {
        return new DepthAwareCodec<>(original, MAX_TRANSLATE_DEPTH);
    }

    @Inject(method = "decompose", at = @At(value = "TAIL"))
    private void decomposeTemplate(final CallbackInfo ci, final @Local Language language) {
        if (language == this.decomposedWith) return;

        // Free up Int2IntOpenHashMap to save memory
        papermixins$references.remove();
    }

    @Inject(method = "getArgument", at = @At(value = "RETURN", ordinal = 0))
    private void getArgument(final int i, final CallbackInfoReturnable<FormattedText> cir) {
        final int refCount = papermixins$references.get().compute(i, (k, v) -> v == null ? 1 : v + 1);
        if (refCount > MAX_COMPONENT_REFERENCES) {
            throw new TranslatableFormatException((TranslatableContents) (Object) this,
                    "Argument " + i + " referenced too many times");
        }
    }
}
